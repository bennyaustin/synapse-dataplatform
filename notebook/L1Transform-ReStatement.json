{
	"name": "L1Transform-ReStatement",
	"properties": {
		"description": "Notebook to simplify the json generated by form recognizer",
		"folder": {
			"name": "L1Transform"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mediumMO",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "72f59ba3-fc91-491c-9686-ed826cd1229b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/735994b1-b3b0-46d5-96bc-c9b30ddb4265/resourceGroups/rg-synapse-dp/providers/Microsoft.Synapse/workspaces/ba-synapse01-lhf7sbrgc3jru/bigDataPools/mediumMO",
				"name": "mediumMO",
				"type": "Spark",
				"endpoint": "https://ba-synapse01-lhf7sbrgc3jru.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mediumMO",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run /common/datalake-functions {\"storageAccount\": \"badatalake01lhf7sbrgc3jr\" }"
				],
				"execution_count": 89
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Notebook Parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"L1TransformInstanceID = None\n",
					"L1TransformID = None\n",
					"IngestID = None\n",
					"CustomParameters = None\n",
					"InputRawFileSystem = None\n",
					"InputRawFileFolder = None\n",
					"InputRawFile = None\n",
					"InputRawFileDelimiter = None\n",
					"InputFileHeaderFlag = None\n",
					"OutputL1CurateFileSystem = None\n",
					"OutputL1CuratedFolder = None\n",
					"OutputL1CuratedFile = None\n",
					"OutputL1CuratedFileDelimiter = None\n",
					"OutputL1CuratedFileFormat = None\n",
					"OutputL1CuratedFileWriteMode = None\n",
					"OutputDWStagingTable = None\n",
					"LookupColumns = None\n",
					"OutputDWTable = None\n",
					"OutputDWTableWriteMode = None\n",
					"ReRunL1TransformFlag = None\n",
					"DeltaName = None"
				],
				"execution_count": 90
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # Parameters for Testing only, should be commented off\n",
					"# L1TransformInstanceID = 1\n",
					"# L1TransformID = 4\n",
					"# IngestID = 4\n",
					"# CustomParameters = None\n",
					"# InputRawFileSystem = 'raw-bronze'\n",
					"# InputRawFileFolder = 're-statements/2023/04'\n",
					"# InputRawFile = '2023-04-05_194935_re-statement.json'\n",
					"# InputRawFileDelimiter = None\n",
					"# InputFileHeaderFlag = None\n",
					"# OutputL1CurateFileSystem = 'curated-silver'\n",
					"# OutputL1CuratedFolder = 're-statements/2023/04'\n",
					"# OutputL1CuratedFile = 'standardized_2023-04-05_194935_re-statement.json'\n",
					"# OutputL1CuratedFileDelimiter = None\n",
					"# OutputL1CuratedFileFormat = 'json'\n",
					"# OutputL1CuratedFileWriteMode = 'overwrite'\n",
					"# OutputDWStagingTable = None\n",
					"# LookupColumns = None\n",
					"# OutputDWTable = None\n",
					"# OutputDWTableWriteMode = None\n",
					"# ReRunL1TransformFlag = None\n",
					"# DeltaName = None"
				],
				"execution_count": 91
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"import pyspark.sql.functions \n",
					"df = readFile(InputRawFileSystem, InputRawFileFolder +\"/\" + InputRawFile, None, None)\n",
					"ingestCount = df.count()\n",
					"\n",
					"# extract datapoints of interest and explode array\n",
					"\n",
					"# df.printSchema()\n",
					"df = df.select(col(\"fields.RE agency.valueString\").alias(\"re_agency\")\n",
					"            ,col(\"fields.owner.valueString\").alias(\"owner\")\n",
					"            ,col(\"fields.owner address.valueString\").alias(\"re_agency_address\")\n",
					"            ,col(\"fields.rental address.valueString\").alias(\"rental_address\")\n",
					"            ,col(\"fields.statement date.valueString\").alias(\"statement_date\")\n",
					"            ,col(\"fields.tenant.valueString\").alias(\"tenant\")\n",
					"            ,col(\"fields.total payment.valueString\").alias(\"total_payment\")\n",
					"            ,explode(col(\"fields.statement details.valueArray\")).alias(\"statement details\")\n",
					"            )\n",
					"\n",
					"df = df.select(\"re_agency\",\"owner\",\"re_agency_address\",\"rental_address\",\"statement_date\",\"tenant\",\"total_payment\"\n",
					"                ,col(\"statement details.valueObject.amount.valueString\").alias(\"item_amount\")\n",
					"                ,col(\"statement details.valueObject.item description.valueString\").alias(\"item_description\"))\n",
					"df.printSchema()\n",
					"\n",
					"#write flattened json to curated zone of data lake\n",
					"l1TransformCount = df.count()\n",
					"writeFile(df,OutputL1CurateFileSystem, OutputL1CuratedFolder + \"/\" + OutputL1CuratedFile)"
				],
				"execution_count": 93
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Return Values   "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"mssparkutils.notebook.exit(json.dumps({\n",
					"  \"IngestCount\": ingestCount,\n",
					"  \"L1TransformCount\": l1TransformCount\n",
					"}))"
				],
				"execution_count": null
			}
		]
	}
}
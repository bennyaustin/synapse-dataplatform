{
	"name": "AAD-functions",
	"properties": {
		"description": "Reusable functions for Azure Active Directory",
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mediumMO",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ca2f87fb-9e97-4f43-a2b2-e1b84d7690df"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/735994b1-b3b0-46d5-96bc-c9b30ddb4265/resourceGroups/rg-synapse-dp/providers/Microsoft.Synapse/workspaces/ba-synapse01-lhf7sbrgc3jru/bigDataPools/mediumMO",
				"name": "mediumMO",
				"type": "Spark",
				"endpoint": "https://ba-synapse01-lhf7sbrgc3jru.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mediumMO",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Re-usable functions for Azure Active Directory"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/keyvault-functions {\"kvLinkedService\": \"ba-kv01-lhf7sbrgc3jru\"}"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"tenandIdSecret = \"<Azure Key Vault Secret for TenantID>\"\n",
					"servicePrincipalIdSecret = \"<Azure Key Vault Secret for Service Principal ID>\"\n",
					"servicePrincipalSecret = \"<Azure Key Vault Secret for Service Principal secret>\"\n",
					"authUrl = \"https://login.windows.net\"\n",
					"resourceUrl = \"https://database.windows.net/\""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import adal\n",
					"\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# getBearerToken()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def getBearerToken():\n",
					"    ############################################################################\n",
					"    # getBearerToken\n",
					"    # Returns a bearer token for a service principal AAD authentication\n",
					"    #\n",
					"    # Parameters:\n",
					"    #       None\n",
					"    #\n",
					"    # Returns:\n",
					"    #     Bearer Token  \n",
					"    ############################################################################\n",
					"\n",
					"    tenantId = getSecret(tenandIdSecret)\n",
					"    servicePrincipalId = getSecret(servicePrincipalIdSecret)\n",
					"    secret = getSecret(servicePrincipalSecret)\n",
					"\n",
					"    assert tenantId is not None, \"tenantId not specified\"\n",
					"    assert servicePrincipalId is not None, \"servicePrincipalId not specified\"\n",
					"    assert secret is not None, \"secret not specified\"\n",
					"    assert authUrl is not None, \"authUrl not specified\"\n",
					"    assert resourceUrl is not None, \"resourceUrl not specified\"\n",
					"\n",
					"    authority = authUrl + \"/\" + tenantId\n",
					"    try:\n",
					"        context = adal.AuthenticationContext(authority)\n",
					"        token = context.acquire_token_with_client_credentials(resourceUrl, servicePrincipalId, secret)\n",
					"        accessToken = token[\"accessToken\"]\n",
					"    except Exception as e:\n",
					"        print(\"getBearerToken failed with exception:\")\n",
					"        raise e\n",
					"    return accessToken"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}
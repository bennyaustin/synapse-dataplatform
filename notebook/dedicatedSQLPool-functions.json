{
	"name": "dedicatedSQLPool-functions",
	"properties": {
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mediumMO",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1c731b39-3bee-4f1c-91db-b23ce9630374"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/735994b1-b3b0-46d5-96bc-c9b30ddb4265/resourceGroups/rg-synapse-dp/providers/Microsoft.Synapse/workspaces/ba-synapse01-lhf7sbrgc3jru/bigDataPools/mediumMO",
				"name": "mediumMO",
				"type": "Spark",
				"endpoint": "https://ba-synapse01-lhf7sbrgc3jru.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mediumMO",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Re-usable functions for Azure Synapse SQL Dedicated Pool"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/keyvault-functions {\"kvLinkedService\": \"ba-kv01-lhf7sbrgc3jru\"}"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"server=\"<SynapseWorkspaceName>.sql.azuresynapse.net,1433\"\n",
					"database = \"<DedicatedSQLPool>\""
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import com.microsoft.spark.sqlanalytics\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\n",
					"import sys"
				],
				"execution_count": 45
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## readSdpTable()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def readSdpTable(schema,table,colList=None,filterCondition=None,limitRows=None):\n",
					"  # ##########################################################################################################################  \n",
					"  # Function: readSdpTable\n",
					"  # Reads records from the Azure Synapse Dedicated Pool table/view and returns as dataframe\n",
					"  # \n",
					"  # Parameters:\n",
					"  #     schema          = Schema name of the Azure Synapse Dedicated Pool table.\n",
					"  #     table           = Table Name.\n",
					"  #     colList         = (Optional) List of columns to be returned in the dataframe. \n",
					"  #                       E.g [\"col1\",\"col2\",\"col3\"].\n",
					"  #                       Returns all columns if none provided.\n",
					"  #     filterCondition = (Optional) Expression to filter the dataframe as push-down filter to database. \n",
					"  #                       E.g col(\"Title\").contains(\"E\").\n",
					"  #                       Returns all rows when not provided.\n",
					"  #     limitRows       = (Optional) Integer to fetch N records from the table.\n",
					"  #                       Returns all rows when none provided.\n",
					"  #\n",
					"  # Returns:\n",
					"  #     Dataframe containing the relevant rows and columns of an Azure Synapse Dedicated Pool table/view\n",
					"  # ##########################################################################################################################  \n",
					"    assert server is not None, \"Server not specified\"\n",
					"    assert database is not None, \"Database not specified\"\n",
					"    assert schema is not None, \"Schema not specified\"\n",
					"    assert table is not None, \"Table not specified\"\n",
					"\n",
					"    tableName = database + \".\" + schema+ \".\" + table\n",
					"   \n",
					"    try:\n",
					"        if server is not None and database is not None and schema is not None and table is not None:\n",
					"            df = (spark.read\n",
					"                        .option(Constants.SERVER,server)\n",
					"                        .synapsesql(tableName)\n",
					"                )\n",
					"\n",
					"        if colList is not None:\n",
					"            df = df.select(colList)\n",
					"        \n",
					"        if filterCondition is not None:\n",
					"            df = df.filter(filterCondition)\n",
					"\n",
					"        if limitRows is not None:\n",
					"            df = df.limit(limitRows)\n",
					"    except Exception as e:\n",
					"        print(\"Read from {}.{} failed with exception:\".format(schema,table))   \n",
					"        raise e\n",
					"    return df"
				],
				"execution_count": 47
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## insertSdpTable()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def insertSdpTable(df, schema,table, mode):\n",
					"  # ##########################################################################################################################  \n",
					"  # Function: insertSdpTable\n",
					"  # Writes a dataframe to an Azure Synapse Dedicated Pool table\n",
					"  # \n",
					"  # Parameters:\n",
					"  #     df              = Dataframe to be written to Azure Synapse Dedicated Pool table.\n",
					"  #     schema          = Schema name of the Azure Synapse Dedicated Pool table.\n",
					"  #     table           = Table Name.\n",
					"  #     mode            = Write mode to table. \n",
					"  #                       Options for write modes are \"error\" or \"errorifexists\" (default), \"overwrite\", \"append\", \"ignore\".\n",
					"  #\n",
					"  # Returns:\n",
					"  #     None\n",
					"  # ##########################################################################################################################  \n",
					"    assert server is not None, \"Server not specified\"\n",
					"    assert database is not None, \"Database not specified\"\n",
					"    assert schema is not None, \"Schema not specified\"\n",
					"    assert table is not None, \"Table not specified\"\n",
					"    assert mode in [\"append\",\"overwrite\",\"error\",\"errorifexists\",\"ignore\"], \"Invalid mode specified. Mode should be either append,overwrite,error,errorifexists or ignore\"\n",
					"\n",
					"    tableName = database + \".\" + schema+ \".\" + table\n",
					"    try:\n",
					"      (df.write\n",
					"          .option(Constants.SERVER, server)\n",
					"          .mode(mode)\n",
					"          .synapsesql(tableName))\n",
					"    except Exception as e:\n",
					"      print(\"Insert to {}.{} failed with exception:\".format(schema,table))\n",
					"      raise e\n",
					"    return\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}
{
	"name": "SQL-functions",
	"properties": {
		"description": "Reusable functions for Azure SQL and SQL Server",
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mediumMO",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3b130b4a-6d47-4230-88f8-9d3a5f32527c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/735994b1-b3b0-46d5-96bc-c9b30ddb4265/resourceGroups/rg-synapse-dp/providers/Microsoft.Synapse/workspaces/ba-synapse01-lhf7sbrgc3jru/bigDataPools/mediumMO",
				"name": "mediumMO",
				"type": "Spark",
				"endpoint": "https://ba-synapse01-lhf7sbrgc3jru.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mediumMO",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Re-usable functions for Azure SQL and SQL Server"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/keyvault-functions {\"kvLinkedService\": \"keyvault01\"}"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"server=\"<Azure SQL Server/ SQL Server>\"\n",
					"database = \"<Database Name>\"\n",
					"usernameSecret = \"<Azure Key Vault Secret for SQL User>\"\n",
					"passwordSecret = \"<Azure Key Vault Secret for SQL User Password>\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyodbc"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# getJdbcUrl()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def getJdbcUrl():\n",
					"  # ##########################################################################################################################  \n",
					"  # Function: getJdbcUrl\n",
					"  # Creates the JDBC Connection String from the input parameters to this notebook\n",
					"  # \n",
					"  # Parameters:\n",
					"  # None\n",
					"  #\n",
					"  # Returns:\n",
					"  # JDBC Connection String\n",
					"  # ##########################################################################################################################  \n",
					"    assert server is not None, \"server not specified\"\n",
					"    assert database is not None, \"database not specified\"\n",
					"    assert usernameSecret is not None, \"usernameSecret not specified\"\n",
					"    assert passwordSecret is not None, \"passwordSecret not specified\"\n",
					"\n",
					"    user =  getSecret(usernameSecret)\n",
					"    password = getSecret(passwordSecret)\n",
					"    jdbcUrl = \"jdbc:sqlserver://\" + server + \".database.windows.net:1433;database=\" + database + \";user=\" + user + \"@\" + server + \";password=\" + password + \";encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\"\n",
					"    return jdbcUrl"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# readTable()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def readTable(table):\n",
					"  # ##########################################################################################################################  \n",
					"  # Function: readTable\n",
					"  # Reads all the rows and columns of an Azure SQL table/view and returns the records as dataframe\n",
					"  # \n",
					"  # Parameters:\n",
					"  # table = Input Table/View including the schema name. E.g soccer.goalpost, afl.goalpost\n",
					"  #\n",
					"  # Returns:\n",
					"  # Dataframe containing all rows and columns of a table/view in Azure SQL\n",
					"  # ##########################################################################################################################  \n",
					"    assert table is not None, \"table not specified\"\n",
					"\n",
					"    jdbcUrl = getJdbcUrl()\n",
					"\n",
					"    try:\n",
					"      df = (spark.read\n",
					"              .format(\"jdbc\")\n",
					"              .option(\"driver\",\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\n",
					"              .option(\"url\",jdbcUrl)\n",
					"              .option(\"dbtable\",table)\n",
					"              .load()\n",
					"          )\n",
					"    except Exception as e:\n",
					"        print(\"readTable({}) failed with exception:\".format(table))\n",
					"        raise e\n",
					"\n",
					"\n",
					"    ## Use Apache Spark Connector in Future instead of JDBC connector for faster execution. At the moment Apache Spark Connector is not available on newer Spark Runtime\n",
					"    ## Have to install a library from maven coordinates:com.microsoft.azure:spark-mssql-connector_2.12:1.2.0\n",
					"    ## https://docs.microsoft.com/en-us/sql/connect/spark/connector?view=sql-server-ver16\n",
					"    #   df = (spark.read\n",
					"    #           .format(\"com.microsoft.sqlserver.jdbc.spark\")\n",
					"    #           .option(\"url\",jdbcUrl)\n",
					"    #           .option(\"dbtable\",table)\n",
					"    #           .load()\n",
					"    #       )\n",
					"    return df"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# readQuery()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def readQuery(query):\n",
					"  # ##########################################################################################################################  \n",
					"  # Function: readQuery\n",
					"  # Executes the input query at Azure SQL and returns the records as dataframe\n",
					"  # \n",
					"  # Parameters:\n",
					"  # query = A valid input query\n",
					"  #\n",
					"  # Returns:\n",
					"  # Dataframe containing all rows and columns returned by query from Azure SQL\n",
					"  # ##########################################################################################################################  \n",
					"  assert query is not None, \"query not specified\"\n",
					"\n",
					"  jdbcUrl = getJdbcUrl()\n",
					"  try:\n",
					"    df = (spark.read\n",
					"            .format(\"jdbc\")\n",
					"            .option(\"driver\",\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\n",
					"            .option(\"url\",jdbcUrl)\n",
					"            .option(\"query\",query)\n",
					"            .load()\n",
					"        )\n",
					"  except Exception as e:\n",
					"        print(\"readQuery({}) failed with exception:\".format(query))\n",
					"        raise e\n",
					"    ## Use Apache Spark Connector in Future instead of JDBC connector for faster execution. At the moment Apache Spark Connector is not available on newer Spark Runtime\n",
					"    ## Have to install a library from maven coordinates:com.microsoft.azure:spark-mssql-connector_2.12:1.2.0\n",
					"    ## https://docs.microsoft.com/en-us/sql/connect/spark/connector?view=sql-server-ver16\n",
					"    #   df = (spark.read\n",
					"    #           .format(\"com.microsoft.sqlserver.jdbc.spark\")\n",
					"    #           .option(\"url\",jdbcUrl)\n",
					"    #           .option(\"dbtable\",table)\n",
					"    #           .load()\n",
					"    #       )\n",
					"  return df"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# insertTable()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def insertTable(df,table,writeMode,preserveSchema = None):\n",
					"  # ##########################################################################################################################  \n",
					"  # Function: insertTable\n",
					"  # Inserts a dataframe to a Azure SQL\n",
					"  # \n",
					"  # Parameters:\n",
					"  # df = Input dataframe\n",
					"  # table = Target table where the datafframe is loaded\n",
					"  # writeMode = Describes how data from dataframe is inserted to datawarehouse table. Allowed values are - append/overwrite/ignore/error/errorifexists\n",
					"  # preserveSchema = True/False. Applicable only in overwrite mode when schema needs to be preserved\n",
					"  # Returns:\n",
					"  # None\n",
					"  # ########################################################################################################################## \n",
					"  assert table is not None, \"query not specified\"\n",
					"  assert writeMode is not None, \"writeMode not specified\"\n",
					"  assert writeMode in [\"append\",\"overwrite\",\"ignore\",\"error\",\"errorifexists\"] , \"writeMode is invalid. Allowed values are append,overwrite,ignore,error,errorifexists\"\n",
					"\n",
					"  jdbcUrl = getJdbcUrl()\n",
					"  \n",
					"  try:\n",
					"    if writeMode == \"overwrite\" and preserveSchema == True :\n",
					"      #Truncate and Append instead of overwrite to preserve table schema\n",
					"      (df.write\n",
					"      .format(\"jdbc\")\n",
					"      .option(\"driver\",\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\n",
					"      .option(\"url\",jdbcUrl)\n",
					"      .mode(\"append\")\n",
					"      .option(\"truncate\", \"true\") # Must be string \"true\" and not boolean True\n",
					"      .option(\"dbtable\",table)\n",
					"      .save()\n",
					"      )\n",
					"    else:\n",
					"      (df.write\n",
					"      .format(\"jdbc\")\n",
					"      .option(\"driver\",\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\n",
					"      .option(\"url\",jdbcUrl)\n",
					"      .mode(writeMode)\n",
					"      .option(\"dbtable\",table)\n",
					"      .save()\n",
					"      ) \n",
					"  except Exception as e:\n",
					"        print(\"insertTable({}) failed with exception:\".format(query))\n",
					"        raise e \n",
					"    ## Use Apache Spark Connector in Future instead of JDBC connector for faster execution. At the moment Apache Spark Connector is not available on newer Spark Runtime\n",
					"    ## Have to install a library from maven coordinates:com.microsoft.azure:spark-mssql-connector_2.12:1.2.0\n",
					"    ## https://docs.microsoft.com/en-us/sql/connect/spark/connector?view=sql-server-ver16\n",
					"    #   df = (spark.read\n",
					"    #           .format(\"com.microsoft.sqlserver.jdbc.spark\")\n",
					"    #           .option(\"url\",jdbcUrl)\n",
					"    #           .option(\"dbtable\",table)\n",
					"    #           .load()\n",
					"    #       )"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# upsert()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upsert(df,SchemaStagingTable,StagingTable, SchemaTargetTable, TargetTable, KeyColumns,IdentityColumns=None, DeltaColumn=None) :\n",
					"# ##########################################################################################################################  \n",
					"# Function: upsert\n",
					"# Performs a Merge/Upsert action on a Azure SQL table\n",
					"# \n",
					"# Parameters:\n",
					"# df = Input dataframe\n",
					"# StagingTable = Name of Table used to temporarily stage the input data frame\n",
					"# SchemaStagingTable = Database schema of staging table\n",
					"# SchemaTargetTable = Database schema of target table\n",
					"# TargetTable  = Name of Target Table\n",
					"# KeyColumns = List of columns that uniquely defines a record in input dataframe\n",
					"# IdentityColumns = List of Identity Columns that needs to be excluded from Inserts and Updates\n",
					"# DeltaColumn = Name of watermark column in input dataframe\n",
					"#\n",
					"# Returns:\n",
					"# None\n",
					"# ##########################################################################################################################  \n",
					"\n",
					"    insertTable(df,SchemaStagingTable + \".\" + StagingTable,\"overwrite\")\n",
					"    \n",
					"\n",
					"    insertCols=\"\"\n",
					"    updateCols=\"\"\n",
					"    whereCols =\"\"\n",
					"    keyCols = \"\"\n",
					"\n",
					"    # MATCHED Clause of MERGE\n",
					"    for keyCol in KeyColumns:\n",
					"        keyCols = keyCols + \"source.\" + keyCol + \" = \" + \"target.\" + keyCol + \" and \"\n",
					"\n",
					"    whereClause = keyCols\n",
					"    #Tidy up where clause and remove last \"and\"\n",
					"    remove=\"and\"\n",
					"    reverse_remove=remove[::-1]\n",
					"    whereClause = whereClause[::-1].replace(reverse_remove,\"\",1)[::-1]\n",
					"\n",
					"    # INSERT and UPDATE part of MERGE\n",
					"    for col in df.schema.fieldNames():\n",
					"        if col not in IdentityColumns: # Exclude Identity columns in Insert statement\n",
					"            insertCols = insertCols + col + \",\"\n",
					"        if col not in KeyColumns and col not in IdentityColumns: # Exclude key and Identity columns in update statement\n",
					"            updateCols =  updateCols + \"target.\" + col + \" = \" + \"source.\" + col + \",\"\n",
					"\n",
					"    #Tidy up insertCols and remove last \",\"\n",
					"    remove=\",\"\n",
					"    reverse_remove=remove[::-1]\n",
					"    insertCols = insertCols[::-1].replace(reverse_remove,\"\",1)[::-1]  \n",
					"\n",
					"    #Tidy up insertCols and remove last \",\"\n",
					"    remove=\",\"\n",
					"    reverse_remove=remove[::-1]\n",
					"    updateCols = updateCols[::-1].replace(reverse_remove,\"\",1)[::-1]   \n",
					"\n",
					"    # MERGE Statement in full\n",
					"    mergeSQL= \"MERGE INTO \" + SchemaTargetTable +\".\" + TargetTable + \" AS target\" +  \" USING \" + SchemaStagingTable + \".\" + StagingTable + \" AS source\" + \" ON \"\n",
					"    mergeSQL = mergeSQL + whereClause\n",
					"\n",
					"    # WHEN MATCHED\n",
					"    if DeltaColumn != None:\n",
					"        mergeSQL =  mergeSQL + \" WHEN MATCHED AND \" + \"source.\" + DeltaColumn + \" > \" + \"target.\" + DeltaColumn \n",
					"    else:\n",
					"        mergeSQL =  mergeSQL + \" WHEN MATCHED\"\n",
					"\n",
					"    mergeSQL = mergeSQL + \" THEN UPDATE SET \" + updateCols\n",
					"\n",
					"    # WHEN NOT MATCHED BY TARGET\n",
					"    mergeSQL = mergeSQL + \" WHEN NOT MATCHED BY TARGET \" # including BY TARGET clause for Synapse requires the table to be Hash Distributed\n",
					"    mergeSQL = mergeSQL + \" THEN INSERT \" +  \"(\"+ insertCols +\")\" + \" VALUES \" + \" ( \"+ insertCols +\" ) \"\n",
					"\n",
					"    mergeSQL = mergeSQL +\";\"\n",
					"    \n",
					"    #Execute Merge Statement using Pyodbc\n",
					"    uid = getSecret(usernameSecret)\n",
					"    pwd = getSecret(passwordSecret)\n",
					" \n",
					"    try:\n",
					"        cnxn = pyodbc.connect(\"DRIVER={ODBC Driver 17 for SQL Server};SERVER=\" + server + \".database.windows.net\" + \";DATABASE=\" + database + \";UID=\" + uid + \";PWD=\" + pwd )\n",
					"        cursor = cnxn.cursor()\n",
					"        cnxn.autocommit = True\n",
					"\n",
					"        cursor.execute(mergeSQL)\n",
					"    except Exception as e:\n",
					"        print(\"Upsert to {}.{} failed with exception:\".format(SchemaTargetTable,TargetTable))\n",
					"        raise e\n",
					"\n",
					"    print(\"Upsert statement executed successfully : {} \".format(mergeSQL))\n",
					"    return"
				],
				"execution_count": 8
			}
		]
	}
}
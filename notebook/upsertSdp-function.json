{
	"name": "upsertSdp-function",
	"properties": {
		"description": "Notebook that implements upsert function using PyOdbc",
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mediumMO",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "83d59507-e792-47b3-892b-27ea5188d7d9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/735994b1-b3b0-46d5-96bc-c9b30ddb4265/resourceGroups/rg-synapse-dp/providers/Microsoft.Synapse/workspaces/ba-synapse01-lhf7sbrgc3jru/bigDataPools/mediumMO",
				"name": "mediumMO",
				"type": "Spark",
				"endpoint": "https://ba-synapse01-lhf7sbrgc3jru.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mediumMO",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Re-usable Upsert function for Azure Synapse Analytics SQL Dedicated Pool"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"server=\"<Azure Synapse DedicatedSQLPool>\"\n",
					"database = \"<Azure Synapse DedicatedSQLPool/Azure SQL>\"\n",
					"sqlUidSecret = \"Azure Key Vault Secret for DedicatedSQLPool user name\"\n",
					"sqlPwdSecret = \"Azure Key Vault Secret for DedicatedSQLPool password\""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"%run /common/keyvault-functions {\"kvLinkedService\": \"keyvault01\"}"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/dedicatedSQLPool-functions {\"server\": \"ba-synapse01-lhf7sbrgc3jru.sql.azuresynapse.net,1433\",\"database\" : \"dwh01\"}"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyodbc"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/dedicatedSQLPool-functions {\"server\": \"ba-synapse01-lhf7sbrgc3jru.sql.azuresynapse.net,1433\",\"database\" :\"dwh01\" }"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# upsertSdp()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upsertSdp(df,SchemaStagingTable,StagingTable, SchemaTargetTable, TargetTable, KeyColumns, DeltaColumn=None) :\n",
					"# ##########################################################################################################################  \n",
					"# Function: upsertSdp\n",
					"# Performs a Merge/Upsert action on a Azure SQL table\n",
					"# \n",
					"# Parameters:\n",
					"# df = Input dataframe\n",
					"# StagingTable = Name of Table used to temporarily stage the input data frame\n",
					"# SchemaStagingTable = Database schema of staging table\n",
					"# SchemaTargetTable = Database schema of target table\n",
					"# TargetTable  = Name of Target Table\n",
					"# KeyColumns = List of columns that uniquely defines a record in input dataframe\n",
					"# DeltaColumn = Name of watermark column in input dataframe\n",
					"#\n",
					"# Returns:\n",
					"# None\n",
					"# ##########################################################################################################################  \n",
					"    insertSdpTable(df, SchemaStagingTable,StagingTable, \"overwrite\")\n",
					"\n",
					"    insertCols=\"\"\n",
					"    updateCols=\"\"\n",
					"    whereCols =\"\"\n",
					"    keyCols = \"\"\n",
					"\n",
					"    # MATCHED Clause of MERGE\n",
					"    for keyCol in KeyColumns:\n",
					"        keyCols = keyCols + \"source.\" + keyCol + \" = \" + \"target.\" + keyCol + \" and \"\n",
					"\n",
					"    whereClause = keyCols\n",
					"    #Tidy up where clause and remove last \"and\"\n",
					"    remove=\"and\"\n",
					"    reverse_remove=remove[::-1]\n",
					"    whereClause = whereClause[::-1].replace(reverse_remove,\"\",1)[::-1]\n",
					"\n",
					"    # INSERT and UPDATE part of MERGE\n",
					"    for col in df.schema.fieldNames():\n",
					"        insertCols = insertCols + col + \",\"\n",
					"        if col not in KeyColumns: # Exclude identity columns in update statement\n",
					"         updateCols =  updateCols + \"target.\" + col + \" = \" + \"source.\" + col + \",\"\n",
					"\n",
					"    #Tidy up insertCols and remove last \",\"\n",
					"    remove=\",\"\n",
					"    reverse_remove=remove[::-1]\n",
					"    insertCols = insertCols[::-1].replace(reverse_remove,\"\",1)[::-1]  \n",
					"\n",
					"    #Tidy up insertCols and remove last \",\"\n",
					"    remove=\",\"\n",
					"    reverse_remove=remove[::-1]\n",
					"    updateCols = updateCols[::-1].replace(reverse_remove,\"\",1)[::-1]   \n",
					"\n",
					"    # MERGE Statement in full\n",
					"    mergeSQL= \"MERGE INTO \" + SchemaTargetTable +\".\" + TargetTable + \" AS target\" +  \" USING \" + SchemaStagingTable + \".\" + StagingTable + \" AS source\" + \" ON \"\n",
					"    mergeSQL = mergeSQL + whereClause\n",
					"\n",
					"    # WHEN MATCHED\n",
					"    if DeltaColumn != None:\n",
					"        mergeSQL =  mergeSQL + \" WHEN MATCHED AND \" + \"source.\" + DeltaColumn + \" > \" + \"target.\" + DeltaColumn \n",
					"    else:\n",
					"        mergeSQL =  mergeSQL + \" WHEN MATCHED\"\n",
					"\n",
					"    mergeSQL = mergeSQL + \" THEN UPDATE SET \" + updateCols\n",
					"\n",
					"    # WHEN NOT MATCHED BY TARGET\n",
					"    mergeSQL = mergeSQL + \" WHEN NOT MATCHED BY TARGET \" # including BY TARGET clause for Synapse requires the table to be Hash Distributed\n",
					"    mergeSQL = mergeSQL + \" THEN INSERT \" +  \"(\"+ insertCols +\")\" + \" VALUES \" + \" ( \"+ insertCols +\" ) \"\n",
					"\n",
					"    mergeSQL = mergeSQL +\";\"\n",
					"    \n",
					"    #Execute Merge Statement using Pyodbc\n",
					"    uid = getSecret(sqlUidSecret)\n",
					"    pwd = getSecret(sqlPwdSecret)\n",
					" \n",
					"    try:\n",
					"        cnxn = pyodbc.connect(\"DRIVER={ODBC Driver 17 for SQL Server};SERVER=\" + server + \";DATABASE=\" + database + \";UID=\" + uid + \";PWD=\" + pwd )\n",
					"        cursor = cnxn.cursor()\n",
					"        cnxn.autocommit = True\n",
					"\n",
					"        cursor.execute(mergeSQL)\n",
					"    except Exception as e:\n",
					"        print(\"Upsert to {}.{} failed with exception:\".format(SchemaTargetTable,TargetTable))\n",
					"        raise e\n",
					"\n",
					"    print(\"Upsert statement executed successfully : {} \".format(mergeSQL))\n",
					"    return"
				],
				"execution_count": 12
			}
		]
	}
}
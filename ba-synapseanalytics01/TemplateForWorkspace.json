{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "ba-synapseanalytics01"
		},
		"ba-synapseanalytics01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ba-synapseanalytics01-WorkspaceDefaultSqlServer'"
		},
		"PurviewBearerToken_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://login.microsoftonline.com"
		},
		"PurviewBearerToken_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "@{linkedService().ClientID}"
		},
		"PurviewBearerToken_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "@{linkedService().TenantID}"
		},
		"PurviewBearerToken_properties_typeProperties_aadResourceId": {
			"type": "string",
			"defaultValue": "https://purview.azure.net"
		},
		"ba-synapseanalytics01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bastoragedatalake01.dfs.core.windows.net"
		},
		"bamachinelearningws_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d"
		},
		"bamachinelearningws_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "rg-dataplatform"
		},
		"bamachinelearningws_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "118aab7c-6863-4684-9252-f3e48e747bd5"
		},
		"bamachinelearningws_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"keyvault01_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ba-keyvault1.vault.azure.net/"
		},
		"storagecosmosdb1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storagecosmosdb1.dfs.core.windows.net"
		},
		"Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_resourceList_logicapp_endpoint": {
			"type": "string",
			"defaultValue": "https://prod-14.australiaeast.logic.azure.com:443/workflows/3938e046963c48968a48636f821d6970/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=HcQMejUIYn77Y9X6Relz4RY31AXZEEyA54qfNulmhFo"
		},
		"Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_subscriptionId": {
			"type": "string",
			"defaultValue": "5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d"
		},
		"Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_resourceType": {
			"type": "string",
			"defaultValue": "Microsoft.Synapse/workspaces/sqlPools"
		},
		"Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_apiVersion": {
			"type": "string",
			"defaultValue": "2021-04-01"
		},
		"Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_action": {
			"type": "string",
			"defaultValue": "pause"
		},
		"Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_sku": {
			"type": "string",
			"defaultValue": "DW100c"
		},
		"Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_sqlPool_logicapp_endpoint": {
			"type": "string",
			"defaultValue": "https://prod-19.australiaeast.logic.azure.com:443/workflows/5f8598c0da594852a579269eadaf38e2/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=OkMprjcH_d3xprJfXXr5iZkZN8-IVIewsLg6GLLSaos"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Manage-All-SQLPools')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Call Resource List Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Logic App Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.resourceList_logicapp_endpoint",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(variables('parameters'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Logic App Parameters",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "parameters",
							"value": {
								"value": "{\"subscriptionId\": \"@{pipeline().parameters.subscriptionId}\",\n\"resourceType\": \"@{pipeline().parameters.resourceType}\",\n\"apiVersion\": \"@{pipeline().parameters.apiVersion}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach-SQLPool",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Call Resource List Logic App",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Call Resource List Logic App').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "resourceGroupName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "resourceGroupName",
										"value": {
											"value": "@last(take(split(item().id,'/'),5))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "workspaceName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "workspaceName",
										"value": {
											"value": "@first(split(item().name,'/'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "sqlPoolName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "sqlPoolName",
										"value": {
											"value": "@last(split(item().name,'/'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SQLPool-Pause-Resume-Scale",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "resourceGroupName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "workspaceName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "sqlPoolName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SQLPool-Pause-Resume-Scale",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"logicapp_endpoint": {
												"value": "@pipeline().parameters.sqlPool_logicapp_endpoint",
												"type": "Expression"
											},
											"subscriptionId": {
												"value": "@pipeline().parameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroupName": {
												"value": "@variables('resourceGroupName')",
												"type": "Expression"
											},
											"workspaceName": {
												"value": "@variables('workspaceName')",
												"type": "Expression"
											},
											"sqlPoolName": {
												"value": "@variables('sqlPoolName')",
												"type": "Expression"
											},
											"apiVersion": {
												"value": "2021-03-01",
												"type": "Expression"
											},
											"action": {
												"value": "@pipeline().parameters.action",
												"type": "Expression"
											},
											"sku": {
												"value": "@pipeline().parameters.sku",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"resourceList_logicapp_endpoint": {
						"type": "string"
					},
					"subscriptionId": {
						"type": "string"
					},
					"resourceType": {
						"type": "string",
						"defaultValue": "Microsoft.Synapse/workspaces/sqlPools"
					},
					"apiVersion": {
						"type": "string",
						"defaultValue": "2021-04-01"
					},
					"action": {
						"type": "string",
						"defaultValue": "pause"
					},
					"sku": {
						"type": "string",
						"defaultValue": "DW100c"
					},
					"sqlPool_logicapp_endpoint": {
						"type": "string"
					}
				},
				"variables": {
					"parameters": {
						"type": "String"
					},
					"resourceGroupName": {
						"type": "String"
					},
					"workspaceName": {
						"type": "String"
					},
					"sqlPoolName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Manage-SQLPool"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/pipelines/SQLPool-Pause-Resume-Scale')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/REST API with Bearer Auth')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Bearer Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/token",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "tenant=@{pipeline().parameters.TenantID}&client_id=@{pipeline().parameters.ClientID}&client_secret=@{pipeline().parameters.ClientSecret}&grant_type=client_credentials&scope=https://purview.azure.net",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TenantID": {
						"type": "string"
					},
					"ClientID": {
						"type": "string"
					},
					"ClientSecret": {
						"type": "string"
					}
				},
				"variables": {
					"access_token": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Sandbox"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool-Pause-Resume-Scale')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Call SQL Pool Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Logic App Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.logicapp_endpoint",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(variables('parameters'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Logic App Parameters",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "parameters",
							"value": {
								"value": "{\n\"action\": \"@{pipeline().parameters.action}\",\n\"sku\": \"@{pipeline().parameters.sku}\",\n\"subscriptionId\": \"@{pipeline().parameters.subscriptionId}\",\n\"resourceGroupName\": \"@{pipeline().parameters.resourceGroupName}\",\n\"workspaceName\": \"@{pipeline().parameters.workspaceName}\",\n\"sqlPoolName\": \"@{pipeline().parameters.sqlPoolName}\",\n\"apiVersion\": \"@{pipeline().parameters.apiVersion}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"logicapp_endpoint": {
						"type": "string"
					},
					"subscriptionId": {
						"type": "string"
					},
					"resourceGroupName": {
						"type": "string"
					},
					"workspaceName": {
						"type": "string"
					},
					"sqlPoolName": {
						"type": "string"
					},
					"apiVersion": {
						"type": "string",
						"defaultValue": "2021-03-01"
					},
					"action": {
						"type": "string",
						"defaultValue": "pause"
					},
					"sku": {
						"type": "string",
						"defaultValue": "DW100c"
					}
				},
				"variables": {
					"parameters": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Manage-SQLPool"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-07T14:22:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PurviewBearerToken')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "AAD Service Principal Authentication that returns a bearer token for Purview endpoint",
				"parameters": {
					"TenantID": {
						"type": "String"
					},
					"ClientID": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('PurviewBearerToken_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "AadServicePrincipal",
					"servicePrincipalId": "[parameters('PurviewBearerToken_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyvault01",
							"type": "LinkedServiceReference"
						},
						"secretName": "ba-purview-spn"
					},
					"tenant": "[parameters('PurviewBearerToken_properties_typeProperties_tenant')]",
					"aadResourceId": "[parameters('PurviewBearerToken_properties_typeProperties_aadResourceId')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyvault01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ba-synapseanalytics01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ba-synapseanalytics01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ba-synapseanalytics01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ba-synapseanalytics01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bamachinelearningws')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('bamachinelearningws_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('bamachinelearningws_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "ba-machinelearningws01",
					"servicePrincipalId": "[parameters('bamachinelearningws_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyvault01",
							"type": "LinkedServiceReference"
						},
						"secretName": "synapse-machineleaningws-spn"
					},
					"tenant": "[parameters('bamachinelearningws_properties_typeProperties_tenant')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyvault01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/keyvault01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('keyvault01_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/storagecosmosdb1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('storagecosmosdb1_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pause-ALL-Dedicated-SQLPools')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Manage-All-SQLPools",
							"type": "PipelineReference"
						},
						"parameters": {
							"resourceList_logicapp_endpoint": "[parameters('Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_resourceList_logicapp_endpoint')]",
							"subscriptionId": "[parameters('Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_subscriptionId')]",
							"resourceType": "[parameters('Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_resourceType')]",
							"apiVersion": "[parameters('Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_apiVersion')]",
							"action": "[parameters('Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_action')]",
							"sku": "[parameters('Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_sku')]",
							"sqlPool_logicapp_endpoint": "[parameters('Pause-ALL-Dedicated-SQLPools_properties_Manage-All-SQLPools_parameters_sqlPool_logicapp_endpoint')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-07-11T19:00:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Manage-All-SQLPools')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EnrichData_With_AML Model')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE PROCEDURE dbo.nyc_taxi_procedure\nAS\nBEGIN\n\nSELECT\n    CAST([paymentType] AS [bigint]) AS [paymentType],\n    CAST([passengerCount] AS [bigint]) AS [passengerCount],\n    [tripTimeSecs],\n    CAST([pickupTimeBin] AS [varchar]) AS [pickupTimeBin]\nINTO [dbo].[#nyc_taxi]\nFROM [dbo].[nyc_taxi];\n\nSELECT *\nFROM PREDICT (MODEL = (SELECT [model] FROM dbo.nyc_taxi_tip_aml_model WHERE [ID] = 'nyc_taxi_tip_predict:3'),\n              DATA = [dbo].[#nyc_taxi],\n              RUNTIME = ONNX) WITH ([output_label] [bigint])\n\nEND\nGO\n\nEXEC dbo.nyc_taxi_procedure",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dw01",
						"poolName": "dw01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/datalake-functions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "common"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "small31",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "821b3d1a-f02b-4c1d-8a50-8b78c31f0f04"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/small31",
						"name": "small31",
						"type": "Spark",
						"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/small31",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Re-usable Datalake Functions"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# readFile()"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"def readFile(storageAccount, container, path, colSeparator, headerFlag):\r\n",
							"  # ##########################################################################################################################  \r\n",
							"  # Function: readFile\r\n",
							"  # Reads a file from Azure Gen2 Storage and returns as dataframe\r\n",
							"  # \r\n",
							"  # Parameters:\r\n",
							"  # storageAccount = Name of Storage Account  \r\n",
							"  # container = File System/Container of Azure Data Lake Storage\r\n",
							"  # path = realtive path of file including folder name, file name and file extension. For e.g /folder/file.extension\r\n",
							"  # colSeparator = Column separator for text files\r\n",
							"  # headerFlag = boolean flag to indicate whether the text file has a header or not  \r\n",
							"  # \r\n",
							"  # Returns:\r\n",
							"  # A dataframe of the raw file\r\n",
							"  # ##########################################################################################################################    \r\n",
							"\r\n",
							"    filePath = \"abfss://\" + container + \"@\"+ storageAccount + \".dfs.core.windows.net/\" + path\r\n",
							"    if \".csv\" in path or \".txt\" in path:\r\n",
							"        df = spark.read.csv(path=filePath, sep=colSeparator, header=headerFlag, inferSchema=\"true\")\r\n",
							"    elif \".parquet\" in path:\r\n",
							"        df = spark.read.parquet(filePath)\r\n",
							"    elif \".orc\" in path:\r\n",
							"        df = spark.read.orc(filePath)\r\n",
							"    else:\r\n",
							"        df = spark.read.format(\"csv\").load(filePath)\r\n",
							"  \r\n",
							"    df =df.dropDuplicates()\r\n",
							"    return df\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# writeFile()"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"def writeFile(df,storageAccount, container, path, writeMode=\"overwrite\", colSeparator=\",\"):\r\n",
							"  # ##########################################################################################################################  \r\n",
							"  # Function: writeFile\r\n",
							"  # Writes the input dataframe to a file in Azure Gen2 Storage\r\n",
							"  # \r\n",
							"  # Parameters:\r\n",
							"  # df= input dataframe\r\n",
							"  # storageAccount = Name of Storage Account\r\n",
							"  # container = File System/Container of Azure Data Lake Storage\r\n",
							"  # path = realtive path of file including folder name, file name and file extension. For e.g /folder/file.extension\r\n",
							"  # writeMode= mode of writing the curated file. Allowed values - append/overwrite/ignore/error/errorifexists\r\n",
							"  # colSeparator = Column separator for text files\r\n",
							"  # \r\n",
							"  # Returns:\r\n",
							"  # A dataframe of the raw file\r\n",
							"  # ##########################################################################################################################     \r\n",
							"    filePath = \"abfss://\" + container + \"@\"+ storageAccount + \".dfs.core.windows.net/\" + path\r\n",
							"    if \"csv\" in path or 'txt' in path:\r\n",
							"        df.write.csv(filePath,mode=writeMode,sep=colSeparator,header=\"true\")\r\n",
							"    elif \"parquet\" in path:\r\n",
							"        df.write.parquet(filePath,mode=writeMode)\r\n",
							"    elif \"orc\" in path:\r\n",
							"        df.write.orc(filePath,mode=writeMode)\r\n",
							"    elif \"json\" in path:\r\n",
							"        df.write.json(filePath, mode=writeMode)\r\n",
							"    else:\r\n",
							"        df.write.save(path=filePath,format=\"csv\",mode=writeMode)\r\n",
							"    return\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dedicatedSQL-functions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "common"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "small31",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "d7f61950-45f1-4ed7-96f6-ad2f6a8ad080"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/small31",
						"name": "small31",
						"type": "Spark",
						"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/small31",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Re-usable functions for Azure Synapse SQL Dedicated Pool"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /common/keyvault-functions {\"kvLinkedService\": \"keyvault01\"}"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"server=\"<SynapseWorkspaceName>.sql.azuresynapse.net,1433\"\r\n",
							"database = \"<DedicatedSQLPool>\"\r\n",
							"sqlUidSecret = \"Azure Key Vault Secret for DedicatedSQLPool user name\"\r\n",
							"sqlPwdSecret = \"Azure Key Vault Secret for DedicatedSQLPool password\""
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def readSdpTable(schema,table,colList=None,filterCondition=None,limitRows=None):\r\n",
							"  # ##########################################################################################################################  \r\n",
							"  # Function: readSdpTable\r\n",
							"  # Reads records from the Azure Synapse Dedicated Pool table/view and returns as dataframe\r\n",
							"  # \r\n",
							"  # Parameters:\r\n",
							"  #     schema          = Schema name of the Azure Synapse Dedicated Pool table.\r\n",
							"  #     table           = Table Name.\r\n",
							"  #     colList         = (Optional) List of columns to be returned in the dataframe. \r\n",
							"  #                       E.g [\"col1\",\"col2\",\"col3\"].\r\n",
							"  #                       Returns all columns if none provided.\r\n",
							"  #     filterCondition = (Optional) Expression to filter the dataframe as push-down filter to database. \r\n",
							"  #                       E.g col(\"Title\").contains(\"E\").\r\n",
							"  #                       Returns all rows when not provided.\r\n",
							"  #     limitRows       = (Optional) Integer to fetch N records from the table.\r\n",
							"  #                       Returns all rows when none provided.\r\n",
							"  #\r\n",
							"  # Returns:\r\n",
							"  #     Dataframe containing the relevant rows and columns of an Azure Synapse Dedicated Pool table/view\r\n",
							"  # ##########################################################################################################################  \r\n",
							"    tableName = database + \".\" + schema+ \".\" + table\r\n",
							"   \r\n",
							"    if server is not None and database is not None and schema is not None and table is not None:\r\n",
							"        df = (spark.read\r\n",
							"                    .option(Constants.SERVER,server)\r\n",
							"                    .synapsesql(tableName)\r\n",
							"            )\r\n",
							"\r\n",
							"    if colList is not None:\r\n",
							"        df = df.select(colList)\r\n",
							"    \r\n",
							"    if filterCondition is not None:\r\n",
							"        df = df.filter(filterCondition)\r\n",
							"\r\n",
							"    if limitRows is not None:\r\n",
							"        df = df.limit(limitRows)\r\n",
							"    \r\n",
							"    return df"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# uid = getSecret(sqlUidSecret)\r\n",
							"# pwd = getSecret(sqlPwdSecret)"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# import pyodbc\r\n",
							"# cnxn = pyodbc.connect(\"DRIVER={ODBC Driver 17 for SQL Server};SERVER=\" + server + \";DATABASE=\" + database + \";UID=\" + uid + \";PWD=\" + pwd )\r\n",
							"# cursor = cnxn.cursor()\r\n",
							"# cnxn.autocommit = True"
						],
						"outputs": [],
						"execution_count": 49
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/keyvault-functions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "common"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "small31",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "e9a3e502-20c7-4bce-af47-f6c1ee045d4a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/small31",
						"name": "small31",
						"type": "Spark",
						"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/small31",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Re-usable Azure Key Vault Functions"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Parameters and Init"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"kvLinkedService ='your Azure Key Vault Linked Service referenced by this Synapse Workspace'"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## getSecret()\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"def getSecret (secretName):\n",
							"# ##########################################################################################################################  \n",
							"# Function: getSecret\n",
							"# Returns the value of a secret stored in Azure Key Vault that is referenced as link service\n",
							"# \n",
							"# Parameters:\n",
							"# secretName = Name of secret in Azure Key Vault\n",
							"# \n",
							"# Returns:\n",
							"# The value of secret stored in Azure Key Vault\n",
							"# ##########################################################################################################################\n",
							"    try:\n",
							"        return mssparkutils.credentials.getSecretWithLS(kvLinkedService,secretName) #kvLinkedService is a notebook parameter set by the calling notebook\n",
							"    except Exception as e:\n",
							"        print(\"Either Linked Service: \" + kvLinkedService + \" does not exist or Secret: \" + secretName + \" does not exist\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test-datalake-functions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Notebook to test datalake-functions",
				"folder": {
					"name": "tester"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "medium31",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "b6cb038d-6590-43af-a53e-c546f0e85aea"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/medium31",
						"name": "medium31",
						"type": "Spark",
						"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medium31",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"%run /common/datalake-functions"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df = readFile(\"bastoragedatalake01\", \"raw-bronze\", \"nyc-yellowtaxi-trip/yellow_tripdata_2020-01.csv\", \",\", True)\r\n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"writeFile(df,\"bastoragedatalake01\", \"curated-silver\", \"test/nyc-yellowtaxi-trip/yellow_tripdata_2020-01.parquet\", \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test-dedicatedSQL-functions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Notebook to test dedicatedSQL-functions",
				"folder": {
					"name": "tester"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "medium31",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "5da44c34-0234-4f4f-8f0c-c51bcac31c14"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/medium31",
						"name": "medium31",
						"type": "Spark",
						"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medium31",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Test dedicatedSQL-functions"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"%run /common/dedicatedSQL-functions {\"server\": \"ba-synapseanalytics01.sql.azuresynapse.net,1433\",\"database\" :\"dw01\",\"sqlUidSecret\":\"dw01-sqlusername\",\"sqlPwdSecret\":\"dw01-sqlpassword\" }"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Test readSdpTable"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df =readSdpTable(\"nyct\",\"nyc_tlc_yellow_trip\",None,None,10)\r\n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test-keyvault-functions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Notebook to test keyvault-functions",
				"folder": {
					"name": "tester"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "medium31",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "711e5464-e360-423f-8c3d-5f491d7cfc99"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/medium31",
						"name": "medium31",
						"type": "Spark",
						"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medium31",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%run /common/keyvault-functions {\"kvLinkedService\": \"Your AKV Linked Service Name\"}"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"getSecret(\"SecretName\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test-pyodbc')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "tester"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "medium31",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "fc3aa935-849b-45e8-a468-231d79983d1e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/medium31",
						"name": "medium31",
						"type": "Spark",
						"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medium31",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Re-usable functions for Azure Synapse SQL Dedicated Pool"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /common/keyvault-functions {\"kvLinkedService\": \"keyvault01\"}"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"server = \"ba-synapseanalytics01.sql.azuresynapse.net,1433\"\r\n",
							"database = \"dw01\""
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"uid = getSecret(\"dw01-sqlusername\")\r\n",
							"pwd = getSecret(\"dw01-sqlpassword\")"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pyodbc\r\n",
							"\r\n",
							"cnxn = pyodbc.connect(\"DRIVER={ODBC Driver 17 for SQL Server};SERVER=\" + server + \";DATABASE=\" + database + \";UID=\" + uid + \";PWD=\" + pwd )\r\n",
							"cursor = cnxn.cursor()\r\n",
							"cnxn.autocommit = True"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"cursor.execute(\"truncate table dbo.DimActors\")\r\n",
							"row = cursor.fetchone()\r\n",
							"if row:\r\n",
							"    print(row)\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sql = \"\"\"INSERT INTO stg.nyc_tlc_yellow_trip (vendorID,tpepPickupDateTime,tpepDropoffDateTime,passengerCount,tripDistance,puLocationId,doLocationId,startLon,startLat,endLon,endLat,rateCodeId,storeAndFwdFlag\r\n",
							"      ,paymentType\r\n",
							"      ,fareAmount\r\n",
							"      ,extra\r\n",
							"      ,mtaTax\r\n",
							"      ,improvementSurcharge\r\n",
							"      ,tipAmount\r\n",
							"      ,tollsAmount\r\n",
							"      ,totalAmount)\r\n",
							"SELECT top 100 vendorID\r\n",
							"      ,tpepPickupDateTime\r\n",
							"      ,tpepDropoffDateTime\r\n",
							"      ,passengerCount\r\n",
							"      ,tripDistance\r\n",
							"      ,puLocationId\r\n",
							"      ,doLocationId\r\n",
							"      ,startLon\r\n",
							"      ,startLat\r\n",
							"      ,endLon\r\n",
							"      ,endLat\r\n",
							"      ,rateCodeId\r\n",
							"      ,storeAndFwdFlag\r\n",
							"      ,paymentType\r\n",
							"      ,fareAmount\r\n",
							"      ,extra\r\n",
							"      ,mtaTax\r\n",
							"      ,improvementSurcharge\r\n",
							"      ,tipAmount\r\n",
							"      ,tollsAmount\r\n",
							"      ,totalAmount\r\n",
							"  FROM nyct.nyc_tlc_yellow_trip\r\n",
							"  WHERE NOT EXISTS\r\n",
							"  (SELECT 1 FROM stg.nyc_tlc_yellow_trip\r\n",
							"  where stg.nyc_tlc_yellow_trip.vendorID= nyct.nyc_tlc_yellow_trip.vendorID\r\n",
							"  and stg.nyc_tlc_yellow_trip.tpepPickupDateTime = nyct.nyc_tlc_yellow_trip.tpepPickupDateTime\r\n",
							"  and stg.nyc_tlc_yellow_trip.tpepDropoffDateTime = nyct.nyc_tlc_yellow_trip.tpepDropoffDateTime)\"\"\"\r\n",
							"\r\n",
							"cursor.execute(sql)"
						],
						"outputs": [],
						"execution_count": 21
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dw01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/small')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 30
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/medium')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 30
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/small31')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/medium31')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 60
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		}
	]
}
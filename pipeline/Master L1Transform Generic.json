{
	"name": "Master L1Transform Generic",
	"properties": {
		"description": "Generic Level 1 Transformation Pipeline",
		"activities": [
			{
				"name": "Get L1 Instances",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[ELT].[GetTransformInstance_L1]",
						"storedProcedureParameters": {
							"DelayL1TransformationFlag": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.DelayL1TransformationFlag",
									"type": "Expression"
								}
							},
							"L1TransformInstanceId": {
								"type": "Int32",
								"value": null
							},
							"MaxTransformInstance": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.MaxTransformInstance",
									"type": "Expression"
								}
							},
							"SourceSystemName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.SourceSystemName",
									"type": "Expression"
								}
							},
							"StreamName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.StreamName",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlDB_Dataset",
						"type": "DatasetReference",
						"parameters": {
							"Table": "Not Applicable",
							"Schema": "Not Applicable"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach L1 Instance",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get L1 Instances",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get L1 Instances').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Run L1 Transform Pipeline",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "L1Transform-Generic",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"L1TransformInstanceID": {
										"value": "@item().L1TransformInstanceID",
										"type": "Expression"
									},
									"L1TransformID": {
										"value": "@item().L1TransformID",
										"type": "Expression"
									},
									"IngestID": {
										"value": "@item().IngestID",
										"type": "Expression"
									},
									"NotebookName": {
										"value": "@item().NotebookName",
										"type": "Expression"
									},
									"NotebookPath": {
										"value": "@item().NotebookPath",
										"type": "Expression"
									},
									"CustomParameters": {
										"value": "@item().CustomParameters",
										"type": "Expression"
									},
									"InputRawFileSystem": {
										"value": "@item().InputRawFileSystem",
										"type": "Expression"
									},
									"InputRawFileFolder": {
										"value": "@item().InputRawFileFolder",
										"type": "Expression"
									},
									"InputRawFile": {
										"value": "@item().InputRawFile",
										"type": "Expression"
									},
									"InputRawFileDelimiter": {
										"value": "@item().InputRawFileDelimiter",
										"type": "Expression"
									},
									"InputFileHeaderFlag": {
										"value": "@item().InputFileHeaderFlag",
										"type": "Expression"
									},
									"OutputL1CurateFileSystem": {
										"value": "@item().OutputL1CurateFileSystem",
										"type": "Expression"
									},
									"OutputL1CuratedFolder": {
										"value": "@item().OutputL1CuratedFolder",
										"type": "Expression"
									},
									"OutputL1CuratedFile": {
										"value": "@item().OutputL1CuratedFile",
										"type": "Expression"
									},
									"OutputL1CuratedFileDelimiter": {
										"value": "@item().OutputL1CuratedFileDelimiter",
										"type": "Expression"
									},
									"OutputL1CuratedFileFormat": {
										"value": "@item().OutputL1CuratedFileFormat",
										"type": "Expression"
									},
									"OutputL1CuratedFileWriteMode": {
										"value": "@item().OutputL1CuratedFileWriteMode",
										"type": "Expression"
									},
									"OutputDWStagingTable": {
										"value": "@item().OutputDWStagingTable",
										"type": "Expression"
									},
									"LookupColumns": {
										"value": "@item().LookupColumns",
										"type": "Expression"
									},
									"OutputDWTable": {
										"value": "@item().OutputDWTable",
										"type": "Expression"
									},
									"OutputDWTableWriteMode": {
										"value": "@item().OutputDWTableWriteMode",
										"type": "Expression"
									},
									"ReRunL1TransformFlag": {
										"value": "@item().ReRunL1TransformFlag",
										"type": "Expression"
									},
									"MaxRetries": {
										"value": "@item().MaxRetries",
										"type": "Expression"
									},
									"DeltaName": {
										"value": "@item().DeltaName",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"SourceSystemName": {
				"type": "string",
				"defaultValue": "AIML-OCR"
			},
			"StreamName": {
				"type": "string",
				"defaultValue": "analyze-sec-form10q"
			},
			"MaxTransformInstance": {
				"type": "int",
				"defaultValue": 20
			},
			"DelayL1TransformationFlag": {
				"type": "int",
				"defaultValue": 0
			},
			"SparkPool": {
				"type": "string",
				"defaultValue": "smallMO"
			}
		},
		"folder": {
			"name": "Transform/L1 Transform Pipelines"
		},
		"annotations": [],
		"lastPublishTime": "2023-06-25T08:43:02Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}